(define <id> <expression>)

(define pi 3.14)


(define (<id>     <id>*) <expression>+)
	      param.lista

> (define (foo a)(substring a 0 3))
> (foo "abrakaadda")
"abr"

REPL
#t true
#f false
() {} [] ",'`;#\| nem haszn. azonosítóként

függvény hívás:
(<id> <expr>*)

> (substring "Hódmezőhelyvásár" 0 5)
"Hódme"
> (string-append "Hód" "Mező" "hely")
"HódMezőhely"
> (string-length "mezőhelyhód")
11
> (string? "mezőhódvásár")
#t 
> (sqrt -16)
0+4i
> (+ 25 6 23 1 67 7 8 2 9)
148
> (- 2 44)
-42
> (> 5 2)
#t
> (< 5 2)
#f
> (number? "asd")
#f
> (= 5 2)
#f
> (equal? "macska" 2012)
#f

(if <expr> <expr> <expr>)
 ha nem hamis-akkor a 2-dik, ha hamis akkor a 3-dik expr

> (if (> 3 2) "nagyobb" "kisebb")
"nagyobb"
> (if 1 "egy" "nem egy")
"egy"
> (if -1 "minusz" "plusz")
"minusz"
> (define (reply s)
    (if (equal? "hello" (substring s 0 5))
        "hi!"
        "nem hi"))
> (reply "hello")
"hi!"
> (reply "welcome ")
"nem hi"
> (reply 12345)
. . substring: contract violation
  expected: string?
  given: 12345
  argument position: 1st
  other arguments...:
> (reply "asd")
. . substring: ending index is out of range
  ending index: 5
  starting index: 0
  valid range: [0, 3]
  string: "asd"
(and <expr>*)  ha a paraméterek közül hamis valamelyik, akkor hamis, egyébként az utolsó paraméter
(or <expr>*) ha igaz, akkor az első igaz értéket adja vissza, egyébként hamis
> (and)
#t
> (or)
#f

(define (reply s)
  (if (string? s)
      (if (>= (string-length s) 5)
          (if (equal? "hello" (substring s 0 5))
                          "hi"
                          "huh?")
          "huh?")
        "huh?")
      )

(define (reply s)
  (if(and(string? s )(>= (string-length s) 5)
          (equal? "hello" (substring s 0 5))
                         )
           "hi"
           "huh?")
        )

f1=0
f2=1
fn=fn-1 +fn-2 ha n>2

(define (fibo n)
  (if(> n 2) 
     (+ (fibo (- n 1)) (fibo (- n 2)))
     1)
)
(require racket/trace)
(trace fibo)
(fibo 12)
kommentelés |# 
#|(fibo 12)|#

(define my-fact(lambda (x)
		(if (= x 0)
		1
		(* x (my-fact (- x 1)))
		)
		)
)

(define mypow
  (lambda (base exp)
  (if (= 0 exp)
      1
      (* base (mypow base (- exp 1))))))








(- 4 (+ 1 1))
      redex    =reducible expression- redukálható kifejezés

continuation =minden, ami a redex után van

tail position:

expr1 farok pozícióban van expr2-re nézve, ha valahányszor expr1 egy redex, akkor az ő continuation-je azonos az expr2 continuation-jével.


C[(+ 1 1)] = C[(-4 [])]
C[(- 4 [])]= C

(if (zero? 0) (+ 1 1) 3)
C[(if (zero? 0) (+ 1 1) 3)] = C[(if #t (+ 1 1) 3)] = C[(+ 1 1)]


faktoriális farok pozicióval:

(define f
  (lambda (n prod)
   (if (= 0 n)
    prod
    (f (- n 1) (* n prod))
   )
  )
 )



(let binds body)
binds: ((vl expr) (v2 expr)...)

(let ((i 2) (j 3))
  (+ i j))

5

(let ((i 2))
  (let ((j (+ i 2)))
    (* i j)))

8

(let ((+ *) (* +))
  (+ (* 3 4) (* 2 5)))

49

(let ((+ *))
	(let ((* +))
 	(+ (* 3 4) (* 2 5))))

120

(let* ((i 2) (j (+ i 2)))
(+ i j))

6


(let ((p1 v1) (p2 v2) ...) expr1 expr2 ...) egyenértékű:
((lambda (p1 p2 ...) expr1 expr2 ...) v1 v2 ...)

#|másodfokú egyenlet megoldó függvény -b +- (/ (sqrt(- (* b b) (* (* 4 a) c)))) (* 2 a))|#

(define (quadric a b c)
  
  )




letrec 
(do binds (predicate value) body), ahol
binds= ([p1 i1 u1] [p2 i2 u2] ...)



listák

pair(pár)
car
cdr

list(lista)
vagy üres(null), vagy olyan pár, amelynek a másik tagja egy lista




(pair? 1) 
#f
(pair? (cons 1 2))
#t
(pair? (list 1 2))
#t
(pair? '(1 2))
#t
(pair? '())
#f

(null? 1)
#f
(null? '(2 1))
#f
(null? '())
#t
(null? (cdr (list 1)))
#t      ^^^a végét kérjük le

(displayln "---")

(cons 1 2)
'(1 . 2)

(cons 1 '())
'(1)

(car '(1 2))
1^^^az elejét kérjük le
(car (cons 2 3))
2
(cdr '(1 2))
'(2)
(cdr '(1))
'()

null
'()
(eq? '() null)
#t

(list? '(1 2))
#t
(list? (cons 1(cons 2 '() )))
#t
(list? (cons 1 2))
#f

(list 1 2 3 4)
'(1 2 3 4)
(list (list 1 2) (list 3 4))
'((1 2) (3 4))

   ˇˇˇˇaz utolsó argumentumot berakja faroknak
(list* 1 2)
'(1 . 2)
(list* 1 2 (list 3 4))
'(1 2 3 4)

(build-list 10 values)
'(0 1 2 3 4 5 6 7 8 9)
(build-list 5 (lambda (x) (* x x)))
'(0 1 4 9 16)

(length (list 1 2 3 4))
4
(length '())
0

(list-ref (list 1 2 3 4) 2)
3
(list-ref (list 'a 'b 'c) 0)
'a
(list-ref (list 'a 'b 'c) 1)
'b
(list-ref (list 'a 'b 'c) 2)
'c

(list-ref (cons 1 2) 0)
1
(list-ref (cons 1 2) 1)
index reaches a non-pair
  index: 1
  in: '(1 . 2)


(list-tail (list 1 2 3 4 5) 2)
'(3 4 5)
(list-tail (cons 1 2) 1)
2
(list-tail (cons 1 2) 2)
nem pár, error
(list-tail 'not-a-pair 0)
'not-a-pair

(append (list 1 2) (list 3 4) (list 4 5 6) (list 1 3 2))
'(1 2 3 4 4 5 6 1 3 2)
(reverse (list 1 2 3 4 5))
'(5 4 3 2 1)

(define (my-reverse lst)
(let loop ((lst lst) (new-lst null))
  (cond
    [(null? lst) new-lst]
    [else (loop (cdr lst) (cons (car lst) new-lst))]
  )
)
)

(define (my-reverse2 lst)
(cond
[(null? lst) lst]
[else (append (my-reverse2 (cdr lst)) (list (car lst)))]
)
)

(define (my-length2 lst)
  (define (myl l n)
(cond
  [(null? l) n]
  [else (myl (cdr l) (add1 n))]))
  (myl lst 0))

add1
sub1



(map proc lst...+)
----------------------------
(map (lambda (n) (+ 1 n)) '(1 2 3 4) )

>'(2 3 4 5)


(map (lambda (a b) (+ a b)) '(1 2 3 4) '(10 100 1000 1111))
'(11 102 1003 1115)


(andmap proc lst ...+)
(andmap f (list x y z)) <=> (and (f x) (f y) (f z))
-----------------------------
(andmap positive? '(1 2 3))
#t
(andmap positive? '(1 -2 a))
#f
(andmap positive? '(1 2 a))
positive?: contract violation
  expected: real?
(andmap + '(1 2 3) '( 4 5 6))
9<-- 3+6(utolsó elemek)

(ormap proc lst...+)
(ormap f (list x y z)) <=> (or (f x) (f y) (f z))
------------------------------------------------
(ormap eq? '(a b c) '(a b c))
#t
(ormap positive? '(1 2 a))
#t
(ormap + '(1 2 3) '(4 5 6))
5

(for-each proc lst...+)
----------------------------------
(for-each (lambda (n) (printf "Paraméter ~a\n" n))'(1 2 3 4)) 
Paraméter 1
Paraméter 2
Paraméter 3
Paraméter 4

(foldl proc init lst...+)
(foldr proc init lst...+)
---------------------------------
(foldl cons '() '(1 2 3 4))
'(4 3 2 1)
(foldl + 0 '( 1 2 3 4))
10
(foldl (lambda (a b result) (* result (- a b))) 1 '( 1 2 3 4) '(5 6 7 8))
256

(foldr cons '() '(1 2 3 4))
'(1 2 3 4)
(foldr (lambda (v l) (cons (add1 v) l)) '() '(1 2 3 4))
'(2 3 4 5)

(filter pred lst)
----------------------------------
(filter positive? '( 1 2 -3 5 -2 55 -12))
'(1 2 5 55) a #f eltünik a listából

(remove value lst [proc]) első listaelem eltüntetése, ami egyenlő a value-vel
---------------------------------
(remove 2 (list 1 2 3 4))
'(1 3 4)
(remove 2 (list 1 2 3 2 4) =)
'(1 3 2 4)

(remove 2 (list 1 2 3 2 4) >)
'(2 3 2 4)
(remove 2 (list 1 2 3 2 4) <)
'(1 2 2 4)
(remove '(2) (list '(1) '(2) '(3)))
'((1) (3))
(remove #\c (list #\a #\b #\c))
'(#\a #\b)

(remove* v-lst lst [proc]) az összeset eltávolítja
---------------------------------------
(remove* (list 1 2) (list 1 2 3 4 1 5 2 5 3 2 1 66 764))
'(3 4 5 5 3 66 764)

---------(my-remove value lst)----------------
1.vált: eltávolitja a value első előfordulását
2.vált: eltoválítja az összes előfordulálst


(sort lst less-than?)
--------------------------------------------
(sort '(1 3 4 2) >)
'(4 3 2 1)

(sort '(1 3 4 2) <)
'(1 2 3 4)

(sort '("barack" "necske" "low" "kob") string<?)
'("barack" "kob" "low" "necske")

(sort lst less-than? #:key extract-key #:cache-keys? cache-key?)
----------------------------------------------------
(sort '(("barack") ("necske") ("low") ("kob")) #:key car string<?)
'(("barack") ("kob") ("low") ("necske"))

keresés listákban
(member v list)
(member v list is-equal?)
az elemeket az equal? predikátummal hasonlitja össze
--------------------------------------
(member 2 (list 1 2 3 4))
'(2 3 4)

(member 9 (list 1 2 3 4 9))
'(9)

(member #'x (list #'x 2 3 #'y) free-identifier=?)
'(#<syntax:C:\Users\hallgato\Documents\15_dike.rkt:19:20 x> 2 3 
#<syntax:C:\Users\hallgato\Documents\15_dike.rkt:19:28 y>)

(memv v list) 
úgy müködik mint a member, de az elemekt az eqv? predikátummal hasonlitja ossze
(memq v list) 
úgy müködik mint a member, de az elemekt az eq? predikátummal hasonlitja ossze
(memf proc list)
(findf proc list)
---------------------------------
(memf (lambda (arg) (> arg 9)) '( 7 8 9 10 11))
'(10 11)
(findf (lambda (arg) (> arg 9)) '( 7 8 9 10 11))
10

(assoc v list)
(assoc v list is-equal?)
---------------------------------------

(assoc 3 (list (list 1 2) (list 3 4) (list 5 6)))
'(3 4)

(assoc 9 (list (list 1 2) (list 3 4) (list 5 6)))
#f

(assoc 3.5 (list (list 1 2) (list 3 4) (list 5 6)) (lambda (a b) (< (abs (- a b)) ) 1))
'(1 2)

(assv v lst)-->összehasonlitásra eqv?
(assq v lst)--> eq?
-------------------------------------

(assv 3 (list (list 1 2) (list 3 4) (list 5 6)))
'(3 4)

(assv 'c (list (list 'a 'b) (list 'c 'd) (list 'e 'f)))
'(c d)

(assf proc list)
-----------------------------------------
(assf (lambda (x) (> x 2)) (list (list 1 2) (list 3 4) (list 5 6)))
'(3 4)
(displayln "----------------------------")


---------------hozzáférő függvények röviditései----------------

(car (car '((1 2) 3 4)))
1
(caar  '((1 2) 3 4))
1

(car (cdr '((1 2) 3 4)))
3
(cadr  '((1 2) 3 4))
3

(cdr (car '((1 2) 3 4)))
'(2)
(cdar  '((1 2) 3 4))
'(2)

(cdr (cdr '((1 2) 3 4)))
'(4)

(cddr  '((1 2) 3 4))
'(4)

(caaaar '(((((1)2)3)4)5) )
'(1)

----------------további listakezelő fvek és szinonimák--------------
(require racket/list)

empty
'()

(eq? empty null)
#t
(cons? '(1 2))
#t
(pair? '(1 2))
#t
(empty? '())
#t
(empty? '('a))
#f

(first '(1 2 3 4 5 6 7 8 9 10)) -->car
1
(second '(1 2 3 4 5 6 7 8 9 10))
2
(rest '(1 2 3 4 5 6 7 8 9 10)) -->cdr
'(2 3 4 5 6 7 8 9 10)
(tenth '(1 2 3 4 5 6 7 8 9 10))-->ez a max
10
(last '(1 2 3 4 5 6 7 8 9 10 11))
11
(define (my-last lst) (car(reverse lst)))

(define (my-last2 lst) (car(list-tail lst (sub1 (length lst)))))

(last-pair p)
-----------------------------------------------
(last-pair '(1 2 3 4))
'(4)

(make-list k v) k elemű listát, v értékekből
---------------------------
(make-list 7 'foo)
'(foo foo foo foo foo foo foo)


(list-update lst pos updater)  végrehajtja az (updater (list-ref lst pos)) fgv-t 
-----------------------------------------------

(list-update '(zero one two) 0 symbol->string)
'("zero" 1 two)

(list-set lst pos value)
-------------------------------
(list-set '(zero 1 two) 2 "two")
'(zero 1 "two")


(index-of lst v)
(index-of lst v is-equal?)
-----------------------------------------
(index-of '(1 535 2 6 7 35 7 8 3 2 6 4) 2)
2
(index-of '(1 535 2 6 7 35 7 8 3 2 6 4) 5 <)-->a 0.dik helyyen álló cucc kisebb, mint 5
0

(index-where lst proc)
-----------------------------------------
(index-where '(1 2 3 4) even?) --> az 1. pozicióban páros elem van
1


(indexes-where lst proc)
-----------------------------------
(index-where '(1 2 3 4) even?)
'(1 3)


(index-of lst v)
-------------------------------------------
(indexes-of '(3 2 1 3 2 1 32 1 2 3 4 4 3 2 1 2 1 21 32 2 3) 3)
'(0 3 9 12 20)



(take lst pos)
-------------------------------
(take '(1 4 5 2 23 54 6 7 89  4 3 12 6  752) 6)--> az első 6 elemből létrehoz egy listát
'(1 4 5 2 23 54)

(drop lst pos)-->az első 'pos' elemet kihagyja a listából
---------------------------
(drop '(1 2 3 4 5 6 7 8 9 10) 6)
'(7 8 9 10)

(split-at lst pos)
------------------------------------------
(split-at '(1 2 34 4 5 6 7 8 9 10) 5)
'(1 2 34 4 5)
'(6 7 8 9 10)

(values (take '(1 2 3 4 5 6 7 8 9 10) 5) (drop '(1 2 3 4 5 6 7 8 9 10) 5))
'(1 2 3 4 5)
'(6 7 8 9 10)


-----------(define (my-take lst pos))------
-----------(define (my-drop lst pos))------


(takef list pred) vissszaadja a pred-et kielegítő elemeket,addig amig nem talál hamis elemet
--------------------------
(takef '(2 4 5 8) even?)
'(2 4)
(takef '(2 4 6 8) odd?)
'()
(takef '(2 4 . 6) even?)
'(2 4)

(dropf list pred)
---------------------------------
(dropf '(2 4 5 8) even?)
'(5 8)
(dropf '(2 4 6 8) even?)
'()
(dropf '(2 4 6 8) odd?)
'(2 4 6 8)
(dropf '(2 4 . 6) even?)
6

(splitf-at lst pred) <=> (values (takef lst pred) (dropf lst pred))
----------------------------------
(splitf-at '(1 9 3 2 4 5 8 6) even?)
'()
'(1 9 3 2 4 5 8 6)

(splitf-at '(1 9 3 2 4 5 8 6) odd?)
'(1 9 3)
'(2 4 5 8 6)

(take-right lst pos)/(drop-right lst pos)
------------------------------------
(take-right '(1 9 3 2 4 5 8 6) 3)
'(5 8 6)

(drop-right '(1 9 3 2 4 5 8 6) 3)
'(1 9 3 2 4)

(split-at-right lst pos)
------------------------------------
(split-at-right '(1 9 3 2 4 5 8 6) 3)
'(1 9 3 2 4)
'(5 8 6)

(takef-right lst pred)/(dropf-right lst pred)
-------------------------------------
(takef-right '(1 9 3 2 4 5 8 6) odd?)
'()
(takef-right '(1 9 3 2 4 5 8 6) even?)
'(8 6)

(dropf-right '(1 9 3 2 4 5 8 6) odd?)
'(1 9 3 2 4 5 8 6)
(dropf-right '(1 9 3 2 4 5 8 6) even?)
'(1 9 3 2 4 5)

(splitf-at-right)
--------------------------------------------
(splitf-at-right '(1 9 3 2 4 5 8 6) odd?)
'(1 9 3 2 4 5 8 6)
'()
(splitf-at-right '(1 9 3 2 4 5 8 6) even?)
'(1 9 3 2 4 5)
'(8 6)

(string->list)/(list->string)
-----------------------------



(define (lcs a b)
  (let ((a-lst (string->list a)) (b-lst(string->list b)))
    (define (lcs/list a-lst b-lst)
    (cond
      [(or (empty? a-lst) (empty? b-lst)) 0]
      [(eq? (car a-lst) (car b-lst)) (+ 1 (lcs/list (cdr a-lst) (cdr b-lst)))]
      [else (max (lcs/list a-lst (cdr b-lst)) (lcs/list (cdr a-lst) b-lst))]))
  (lcs/list a-lst b-lst)))
szerkesztési távolság(edit distance), levenstein-távolság


(define (editdist a b)
  (let ((a-lst (string->list a)) (b-lst(string->list b)))
    (define (edit-dist/list a-lst b-lst)
    (cond
      [(and (empty? a-lst) (empty? b-lst)) 0]
      [(empty? a-lst) (length b-lst)]
      [(empty? b-lst) (length a-lst)]
      [(eq? (car a-lst) (car b-lst)) (edit-dist/list (cdr a-lst) (cdr b-lst))]
      [else (+ 1 (min (edit-dist/list a-lst (cdr b-lst))
                 (edit-dist/list (cdr a-lst) b-lst)
                 (edit-dist/list (cdr a-lst) (cdr b-lst))))]))
  (edit-dist/list a-lst b-lst)))


///////////////////////////////////////////////////////////////////////


#lang racket
;(name (make-hash))
;(hash-set)
;(hash-ref)


(define (editdist a b)
  (let ((a-lst (string->list a)) (b-lst(string->list b))(ht (make-hash)))
    (define (edit-dist/list a-lst b-lst)
     (let ((value (hash-ref ht (list a-lst b-lst) #f)))
       (if value
           value
           (let ((result(cond
                          [(and (empty? a-lst) (empty? b-lst)) 0]
                          [(empty? a-lst) (length b-lst)]
                          [(empty? b-lst) (length a-lst)]
                          [(eq? (car a-lst) (car b-lst)) (edit-dist/list (cdr a-lst) (cdr b-lst))]
                          [else (+ 1 (min (edit-dist/list a-lst (cdr b-lst))
                                          (edit-dist/list (cdr a-lst) b-lst)
                                          (edit-dist/list (cdr a-lst) (cdr b-lst))))])))
             (hash-set! ht (list a-lst b-lst) result)
             result))))
                 (edit-dist/list a-lst b-lst)))

(editdist "cat" "bat")
(editdist "fly" "flying")
(editdist "grave" "groovy")
(editdist "alpha" "omega")
(editdist "asdgfhnnrsdgwerwfsfefsev4zwgh" "qqwertvnrsdgwerwfsfefsev4zwgnnhdrg")

(define (osztoi n)
  (let loop((i(exact-floor n)) (lst '()) (n n))
    (cond [(< i 1) lst]
          [(= 0 (modulo n i)) (loop (sub1 i) (cons i (cons(quotient n i) lst)) n)]
          [else (loop (sub1 i) lst n)]
          ))

 )
(osztoi 220)

(define (osztoi2 n)
  (define (loop i lst)
    (cond [(< i 1) lst]
          [(= 0 (modulo n i)) (loop (sub1 i) (cons i (cons(quotient n i) lst)))]
          [else (loop (sub1 i) lst)]
          ))
  (loop (exact-floor (sqrt n)) '()))
(osztoi2 220)
(osztoi2 284)

(define (f x)
  (define (g y)
    (+ x y))
  g)

((f 1) 3)
((f 1) 2)
-------closure--------


(define (osztoi3 n)
  (filter (lambda (e)(= 0 (modulo n e))
            )
          (map add1 (build-list (sub1 n) values))))
	 
	 
	 (define (osztoi4 n)
   (filter (lambda (e)(= 0 (modulo n e)))
           (range 1 n))
  )

currying


